/* @flow */
export type EditorRender = (props: {
  value: mixed,
  handleChange: (newValue: mixed) => void,
}) => React.Element<any>;

export type CellChangeHandler = (rowData: Object) => Object;

export type ColumnProps = {
  valueGetter: (rowData: Object) => mixed,
  valueFormatter: (value: mixed) => string,
  onChange: (value: mixed) => CellChangeHandler,
  editor: EditorRender,
  label: string,
};

export type CellProps = {
  value: mixed,
  onChange: $PropertyType<ColumnProps, 'onChange'>,
  handleRowChange: (handler: CellChangeHandler) => void,
  editor: EditorRender,
};

export type CellState = {
  isEditing: boolean,
};

export type Column = React.ComponentType<ColumnProps>;

export type ColumnChildren = React.ChildrenArray<React.Element<Column>>;

export type RowChangeHandler = (id: string, newData: Object) => void;

export type RowProps = {
  id: string,
  children: ColumnChildren,
  onRowChange: RowChangeHandler,
  data: Object,
};

export type RowRender = (props: { data: Object }) => React.Element<any>;

export type Row = React.ComponentType<RowProps>;

export type GridProps = {
  ids: string[],
  onRowChange: RowChangeHandler,
  children: ColumnChildren,
  enhancer: (render: RowRender) => React.Element<any>,
  decorator: () => (Wrapped: Row) => React.Element<any>,
};

declare module 'ekko' {
  declare export class Column extends React$Component<ColumnProps> {
    static defaultProps: {
      valueFormatter: (value: mixed) => string,
      editor: EditorRender,
    };
  }

  declare export var Row: React$ComponentType<RowProps>;
  declare export var Grid: React$ComponentType<GridProps>;
}
