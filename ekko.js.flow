/* @flow */
export type EditorRender = (props: {
  value: mixed,
  handleChange: (newValue: mixed) => mixed,
}) => React.Element<any>;

export type CellChangeHandler = (rowData: {}) => {};

export type EditorDisplay = 'popover' | 'dialog';

export type ColumnProps = {
  +name: string,
  +label?: string,
  +getter: (rowData: {}) => mixed,
  +render?: (value: mixed) => React$Node,
  +updater?: (value: mixed) => CellChangeHandler,
  +sortable?: boolean | ((value: mixed) => boolean),
  +editor?: EditorRender | 'inline',
  +editorDisplay?: EditorDisplay,
};

export type CellProps = {
  +value: mixed,
  +render: $PropertyType<ColumnProps, 'render'>,
  +updater: $PropertyType<ColumnProps, 'updater'>,
  +editor: $PropertyType<ColumnProps, 'editor'>,
  +editorDisplay: $PropertyType<ColumnProps, 'editorDisplay'>,
  +handleRowChange: (handler: CellChangeHandler) => mixed,
  +index: number,
};

export type CellState = {|
  isEditing: boolean,
  menuPostion: { x: number, y: number } | null,
  previousValue: mixed,
|};

export type Column = React.ComponentType<ColumnProps>;

export type ColumnChildren = React.ChildrenArray<React.Element<Column>>;

export type RowChangeHandler = (id: string, newData: {}) => mixed;

export type RowProps = {|
  +id: string,
  +getColumns: () => ColumnChildren,
  +onRowChange: RowChangeHandler,
  +data: {},
|};

export type RowRender = (props: { data: {} }) => React.Element<any>;

export type Row = React.ComponentType<RowProps>;

export type SortOrder = 'asc' | 'desc' | 'none';

export type DataProps = {
  data: { [string]: {} },
  onChange: RowChangeHandler,
};
export type DataState = {|
  ids: string[],
  sortIndex: number,
  sortOrder: SortOrder,
|};

export type GridProps = {
  children: ColumnChildren,
};
export type GridState = {|
  sortIndex: number,
  sortOrder: SortOrder,
|};

declare module 'ekko' {
  declare export class Column extends React$Component<ColumnProps> {}
  declare export var Row: React$ComponentType<RowProps>;
  declare export var Grid: React$ComponentType<GridProps>;
}
